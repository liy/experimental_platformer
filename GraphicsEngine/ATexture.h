#pragma once
#include <string>

typedef unsigned int GLenum;
typedef unsigned char GLubyte;
typedef unsigned int GLuint;

class ATexture
{
public:
	/**
	 * Create later
	 */
	ATexture(void);

	/**
	 * Shortcut to load a texture
	 */
	ATexture(const std::string& $fileName);

	/**
	 * Shortcut to create a texture
	 */
	ATexture(unsigned int contentWidth, unsigned int contentHeight, GLenum pixelDataFormat, unsigned char bpp=4);

	/**
	 * 
	 */
	ATexture(GLubyte* buffer, unsigned int contentWidth, unsigned int contentHeight, unsigned int width, unsigned int height, GLenum pixelDataFormat, unsigned char bpp=4);

	/**
	 * 
	 */
	~ATexture(void);

	/**
	 * 
	 */
	GLuint Create(GLubyte* buffer, unsigned int contentWidth, unsigned int contentHeight, unsigned int width, unsigned int height, GLenum pixelDataFormat, unsigned char bpp=4);

	/**
	 * @return GLuint texture id.
	 */
	GLuint Create(unsigned int contentWidth, unsigned int contentHeight, GLenum pixelDataFormat, unsigned char bpp=4);

	/**
	 * Assume the texture width and height has not changed. Before you update the buffer make sure you bind the correct texture.
	 */
	void UpdateBuffer(GLubyte* buffer);

	// When bound the texture using OpenGL, an ID is generated for this texture.
	const GLuint GetTextureID() const;

	// Bytes per pixel
	const unsigned int bpp() const;

	// The final generated texture width, it will always be a power of 2
	const unsigned int width() const;

	// The final generated texture height, it will always be a power of 2
	const unsigned int height() const;

	// The loaded raw image width
	const unsigned int contentHeight() const;

	// The loaded raw image height
	const unsigned int contentWidth() const;

protected:
	// The texture ID, generated by OpenGL texture binding
	GLuint _textureID;

	//byte per pxiel
	unsigned char _bpp;

	// The loaded raw image width
	unsigned int _contentWidth;
	// The loaded raw image height
	unsigned int _contentHeight;

	// The final generated texture width, it will always be a power of 2
	unsigned int _width;

	// The final generated texture height, it will always be a power of 2
	unsigned int _height;
};

