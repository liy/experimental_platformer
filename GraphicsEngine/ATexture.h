#pragma once
#include <string>
#include <GL\glut.h>
#include <GL\GL.h>

class ATextureManager;

// ATexture should not be directly created. All the creation process should be manage through ATextureManager. 
// This ensures that manager can auto release the texture once there is no one using the texture.
class ATexture
{
	// Only ATextureManager can access the protected constructor......
	friend class ATextureManager;

public:
	~ATexture(void);

	//  Create and bind the texture to OpenGL, YOU NEED TO CALL "glBindTexture(GL_TEXTURE_2D, _textureID)" again to activate the texture.
	GLuint Create(const std::string& $fileName);

	// When bound the texture using OpenGL, an ID is generated for this texture.
	const GLuint textureID() const;

	// Get the image file name
	const std::string& fileName() const;

	// Bytes per pixel
	const unsigned int bpp() const;

	// The final generated texture width, it will always be a power of 2
	const unsigned int width() const;

	// The final generated texture height, it will always be a power of 2
	const unsigned int height() const;

	// The loaded raw image width
	const unsigned int contentHeight() const;

	// The loaded raw image height
	const unsigned int contentWidth() const;
protected:
	// Once create the texture, the texture is immeditely created
	ATexture(const std::string& $fileName);

	// You can use Create function to specify the file name.
	ATexture(void);

	// File name
	std::string _fileName;

	// The texture ID, generated by OpenGL texture binding
	GLuint _textureID;

	// The raw image data. I thought it will be safer to put here. As the data is put into the heap. 
	// If we try to create a local "data array" in the Create function(using the stack?!?!) Probably can get a overflow error
	GLubyte* _data;

	//byte per pxiel
	unsigned int _bpp;

	// The loaded raw image width
	unsigned int _contentWidth;
	// The loaded raw image height
	unsigned int _contentHeight;

	// The final generated texture width, it will always be a power of 2
	unsigned int _width;
	// The final generated texture height, it will always be a power of 2
	unsigned int _height;
};

